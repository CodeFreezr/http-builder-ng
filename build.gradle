buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7'
    id "com.github.hierynomus.license" version "0.13.1"
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id "me.champeau.jbake" version "0.2"
}

apply plugin: 'org.asciidoctor.convert'

sourceCompatibility = 8
targetCompatibility = 8

group = 'org.codehaus.groovy.modules'
version = '0.9.12'

repositories {
    jcenter()
}

dependencies {
    //required
    compile('xml-resolver:xml-resolver:1.2')
    compile('org.slf4j:slf4j-api:1.7.21')

    //optionals
    def optionals = ['com.opencsv:opencsv:3.8',
                     'org.apache.httpcomponents:httpclient:4.5.2',
                     'oauth.signpost:signpost-commonshttp4:1.2.1.1',
                     'oauth.signpost:signpost-core:1.2.1.1',
                     'org.codehaus.groovy:groovy-all:2.4.6',
                     'org.jsoup:jsoup:1.9.2',
                     'net.sourceforge.nekohtml:nekohtml:1.9.22',
                     'com.fasterxml.jackson.core:jackson-databind:2.8.1'];

    optionals.each { opt ->
        compileOnly(opt); testCompile(opt);
    }

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

    testCompile('org.mock-server:mockserver-client-java:3.10.4')
    testCompile('org.mock-server:mockserver-netty:3.10.4')
}

javadoc {
    options.links("http://docs.oracle.com/javase/8/docs/api/", "http://docs.groovy-lang.org/latest/html/gapi/");
}

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //artifact jar
            artifact sourcesJar
            groupId project.group
            version project.version
        }
    }

    configurations.runtime.allDependencies.each {
        println(it);
    }
}

bintray {
    def bintrayUser = project.hasProperty('user') ? project.property('user') : null;
    def bintrayKey = project.hasProperty('key') ? project.property('key') : null;

    if (bintrayUser && bintrayKey) {
        user = bintrayUser
        key = bintrayKey

        publications = ['mavenJava']

        pkg {
            repo = 'dclark'
            name = 'http-builder-ng'
            desc = 'Groovy client for making http requests'
            licenses = ['Apache-2.0']
            labels = ['groovy']
            vcsUrl = 'https://github.com/dwclark/http-builder-ng'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

license {
    header rootProject.file('license_header.txt')

    // Toggle ignoreFailures to false to enable license-checking that will fail the build
    ignoreFailures true

    ext.name = 'David Clark'
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml'])
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

task site(group: 'Documentation', description: 'Builds the documentation web site.', dependsOn: ['build', 'javadoc', 'jacocoTestReport', 'asciidoctor', 'jbake']) << {
    logger.lifecycle 'Building documentation web site...'

    ant.copy(todir: 'build/jbake') {
        fileset(dir: 'build/docs', includes: '**/**')
        fileset(dir: 'build/reports', includes: '**/**')
    }

    ant.copy(todir: 'build/jbake/guide') {
        fileset(dir: 'build/asciidoc', includes: '**/**')
    }
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.') {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}